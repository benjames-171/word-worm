local data = require ("main.data")

local function disable_node (self, node)
	gui.set_enabled(node, false)
end

function init(self)
	self.node = gui.get_node("container")
	gui.set_enabled(self.node, false)
	gui.set_color(self.node, vmath.vector4(1,1,1,0))
end

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(320,480,0), gui.EASING_INOUTQUAD, 0.5, 0.0)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.5, 0.0)
	gui.set_text(gui.get_node("bestword"), string.upper(data.bestword))
	data.state = data.STATE_LEVELCLEAR
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(320,400,0), gui.EASING_INOUTQUAD, 0.5, 0, disable_node)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.5, 0)
end

local function processinput(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if gui.pick_node(gui.get_node("button"), action.x, action.y) then
			hide(self)
			data.level = data.level + 1
			if data.level > data.maxlevel then data.maxlevel = data.level end
			msg.post("player", "newlevel")
			data.savegamefile()
		end	
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	elseif message_id == hash("hide") then
		hide(self)
	elseif message_id == hash("input") then
		processinput(self, message.action_id, message.action)
	end
end
